version: '3.8'

services:
  service:
    build:
      context: ./app  # Вместо образа использовать дерикторию (на основе dockefile) (можно использовать `context .` чтобы копировать текущую дерикторию, но это не рекомендуетсья т.к. тогда сам этот файл попадет в контейнер, что не есть хорошо, т.к. контейнеры должны иметь только необходимые компоненты)
      dockerfile: ../dockerfile.app  # Путь указываеться не относитльно этого docker compose файла, а относительно context, и пути в самом dockerfile указываються относительно context а не самого dokcerfile файла
    container_name: catalog
    ports:
    # Проброс портов 
    # Как это работает: 1й - порт на хосте (личном ПК), 2й - порт внутри контейнера, тут на этом порту запущен uvicorn. Соответсвтенно мы к нашему порту хоста примапливаем сервер который запушен внутри контейнера на своем порту, не обязательно должны чтобы порты хоста и контейнера совпадали, но нужно точно знать на каком порту работает сам контейнер 
    # Обычно свободные 49153–65535
    # а ip задаеться докером для контейнера автоматически, но лучше идентифицировать их по имени, т.к. ip динамичны    `docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <имя контейнера>`
      - '8001:8001'  
    command:
      - python
      - main.py
    env_file: './.env'
    restart: always
    networks:
      - default 

networks:
  default:
    external: false